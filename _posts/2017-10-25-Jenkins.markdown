---
layout: post
title: Jenkins+github+fir持续集成iOS项目
date: 2017-10-25 15:15:24.000000000 +08:00
---

![]({{site.url}}/img/jenkins/Snip20171019_4.png)

### 一.Jenkisn安装和启动
---

安装Jenkins通过homebrew安装比较方便，有的伙伴是通过jenkins主页下载软件的方式,手动安装的，我这里贴出主页链接 [jenkins官网](http://jenkins-ci.org)本文就不在赘述，请自行百度。

- 1.安装jenkins必须先安装java sdk

	[oracle java SDK 下载链接](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)

![]({{site.url}}/img/jenkins/Snip20171025_18.png)



- 2.确认你的电脑已经安装有Homebrew

>Homebrew 简称 brew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件.

```
直接在终端输入以下命令，查看当前设备的Homebrew版本信息：

brew -v

(如果当前设备未安装Homebrew终端上回报错，这时请直接copy下列命令到终端安装Homebrew:)

ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 

回车执行上方命令，安装全都是自动化的，很简单。
```

- 3.安装jenkins

```
命令行直接输入：

$ brew install jenkins

```

> 这一步需要留意Administrator password,这个Administrator password会在后面设置用到，尽量copy出来备用。

![]({{site.url}}/img/jenkins/Snip20171026_23.png)

- 4.启动jenkins

```
命令行直接输入：

$ jenkins

```

![]({{site.url}}/img/jenkins/Snip20171025_15.png)


### 二.注册Jenkins账号
---

- 1.保持jenkins开启状态，打开浏览器输入:[http://localhost:8080](http://localhost:8080),就能进入jenkins页面.

- 2.jenkins页面设置

	> 初次使用kenkins会先看到以下页面

	![]({{site.url}}/img/jenkins/Snip20171026_2.png)
	
	> Administrator password的设置区分是脚本安装，还是dmg文件安装:<br/>
	a ~> 如果是脚本安装的话，可以从终端直接查阅password；<br/>
	
	![]({{site.url}}/img/jenkins/Snip20171026_3.png)
	
	
	>b ~> 如果是dmg文件安装的话，必须从文件查看（安装目录—>secrets—>鼠标右击—>显示属性—>共享与权限—>修改成读与写—>initialAdminPassword—>鼠标右击—>显示属性—>共享与权限—>修改成读与写—>双击打开initialAdminPassword）
	
	![]({{site.url}}/img/jenkins/Snip20171026_4.png)
	
	![]({{site.url}}/img/jenkins/Snip20171026_5.png)
		
	![]({{site.url}}/img/jenkins/Snip20171026_6.png)
	
	![]({{site.url}}/img/jenkins/Snip20171026_7.png)

- 3.注册并登陆jenkins账号

	![]({{site.url}}/img/jenkins/Snip20171026_21.png)
	
	![]({{site.url}}/img/jenkins/Snip20171026_22.png)


### 三、Jenkins插件
---

- 1.安装插件plugin
	
	> 左边栏选择系统设置

	![]({{site.url}}/img/jenkins/Snip20171026_26.png)
	
	> 选择功能列表中的管理插件
	
	![]({{site.url}}/img/jenkins/Snip20171026_26.png)

	
	> 搜索并安装下列插件
	
	![]({{site.url}}/img/jenkins/Snip20171026_31.png)	

	```
	1.Global Post Script Plugin (配置打包脚本)
	
	2.Git Parameter Plug-In (用于配置打包分支)
	
	3.Keychains and Provisioning Profiles Management (用于配置项目发布/测试证书)
	
	4.fir-plugin (打包上传fir配置)
	
	5.Git plugin/GitHub plugin/Git client plugin/Email Extension Plugin
	(这些插件jenkins默认已经安装，如果没有需要手动安装)
	
	6.Xcode integration 
	此插件是用于Xcode配置的，这里注意不用下载
	因为Xcode9打包流程有变化，不管用了，下了也白瞎，文章后面再讲。
	```

	> 已经安装的插件在“可选插件”中搜索是搜索不到的，如果你发现你需要的插件搜不到，可能说明它已经默认安装了，到已“已安装”看看是不是已经安装过了。如果你使用GitLab或者SVN请百度搜索相应的插件，本文demo项目代码都在Github仓库里，网上有大量的资料可查。
	
- 2.管理证书和描述文件插件配置<br/>（使用Keychains and Provisioning Profiles Management插件）
	
	> 进入 ~/Library/Keychains/ 复制该目录下的login.keychain-db到桌面，去掉后面的-db,修改命名为login.keychain备用.
	
	![]({{site.url}}/img/jenkins/Snip20171026_35.png)
	
   > 回到jenkins页面进入如下操作进入证书插件管理页面

   ![]({{site.url}}/img/jenkins/Snip20171026_33.png)
	
   ![]({{site.url}}/img/jenkins/Snip20171026_32.png)
  
	> 点击"选择文件"，选择刚才复制到桌面的login.keychain，点击upload上传。

	Keychains配置:
	
	```
	Filename: 填写上传的文件名：login.keychain
	Password: 开机密码
	Description: 可以不填
	Code Signing Identity : iPhone Distribution: xxxxx Company of China, Ltd. (下面介绍了获取方法)
	```
	
	Provisioning Profiles配置:	
	
	```
	Filename: 填写当前证书对应的描述文件名称 (下面介绍了获取方法)
	Provisioning Profiles Directory Path: /Users/Shared/Jenkins/Library/MobileDevice/Provisioning Profiles  (这是jenkins存放证书对应的描述文件的地方，通过finder到文件夹目录下看看就知道是啥)
	UUID:3ff1xxx-xxxx-xxxx-xxxx-xxxxxbe09d1e7  (下面介绍了获取方法)
	```
	获取工程的CODE\_SIGN\_IDENTITY和PROVISIONING_PROFILE
	> Keychains配置和Provisioning Profiles配置中的Code Signing Identity,UUID,的获取可通过如下方法：
	
	* 右键 xxx.xcodeproj 显示包内容 然后打开project.pbxproj文件
	* command F 搜索 CODE\_SIGN\_IDENTITY 和 PROVISIONING_PROFILE

  	![]({{site.url}}/img/jenkins/Snip20171026_41.png)

	> 上图中可以获取Keychains配置的Code Signing Identity，Provisioning Profiles配置的Filename（PROVISIONING\_PROFILES\_SPECIFIER对应的值）和UUID（PROVISIONING\_PROFILES对应的值）
	
	* 点击save保存设置

### 四、新建项目

  ![]({{site.url}}/img/jenkins/Snip20171026_48.png)

### 五、构建配置

- 1.源码管理

 > 打开创建的jenkins项目

  ![]({{site.url}}/img/jenkins/Snip20171026_48.png)
  
 > 源码管理配置 
 
  ![]({{site.url}}/img/jenkins/Snip20171026_49.png)
  
  ```
  a.点选Git选项
  b.Repository URL	处填写Github仓库地址
  ```

- 2.分支配置

  ![]({{site.url}}/img/jenkins/Snip20171026_53.png)
   
  > 上面点选"参数化构建过程"，会出现Git Paraeter配置，这个就是我们下载的Git Parameter Plug-In插件。Name一栏的名字可以随便取但是要保证这里填写的名称要跟源码管理中的Branch Specifier (blank for 'any')一栏就需要用\$ + 上面填的名称.
   
  ![]({{site.url}}/img/jenkins/Snip20171026_54.png)

- 3.构建环境配置

  ![]({{site.url}}/img/jenkins/Snip20171027_4.png)

  > 点选Keychains and Code Signing Identities 使用证书管理插件进行配置。Keychain就是上传的login.keychian，Code Signing Identity上面已经获取到了，点选Mobile Provisioning Profiles，配置Provisioning Profile，这些现在应该是可以直接选择的。其他按照上图填写即可。
  
- 4.构建配置

  ![]({{site.url}}/img/jenkins/Snip20171027_5.png)

  > 这里需要注意的是 "#获取钥匙串权限:-p" 这里填开机密码；后面的"~/Library/Keychains/login.keychain-db" 此时应该填login.keychain-db，而不是login.keychain。Mac系统10.12版本以后login.keychain都变成了login.keychain-db.

  ![]({{site.url}}/img/jenkins/Snip20171027_6.png)

  > 这里需要注意\"PROVISIONING\_PROFILE\"就是上面获取的描述文件额UUID名称，重点是\-exportOptionsPlist \"\${ROOT\_PATH}iOS\_Build.plist",\${ROOT\_PATH}表示需要打包的项目的根目录，iOS\_Build.plist是自建的文件，这个文件的真身是exportOptions.plist文件,这里我换了个名字。
  
  ![]({{site.url}}/img/jenkins/Snip20171027_6.png)
  
  
  xcodebuild + Xcode9 
使用xcodebuild做打包构建时，执行exportArchive命令出错，错误信息：




[参考博客:iOS Shell脚本自动构建打包、发布、部署jenkins](http://www.jianshu.com/p/ad4a9c40ae59)

#### What's this

[Vno Jekyll](https://github.com/onevcat/vno-jekyll) is a theme for [Jekyll](http://jekyllrb.com). It is a port of my Ghost theme [vno](https://github.com/onevcat/vno), which is originally developed from [Dale Anthony's Uno](https://github.com/daleanthony/uno).

#### Usage

```bash
$ git clone https://github.com/onevcat/vno-jekyll.git your_site
$ cd your_site
$ bundler install
$ bundler exec jekyll serve
```

Your site with `Vno Jekyll` enabled should be accessible in http://127.0.0.1:4000.

For more information about Jekyll, please visit [Jekyll's site](http://jekyllrb.com).

#### Configuration

All configuration could be done in `_config.yml`. Remember you need to restart to serve the page when after changing the config file. Everything in the config file should be self-explanatory.

#### Background image and avatar

You could replace the background and avatar image in `assets/images` folder to change them.

#### Sites using Vno

[My blog](http://onevcat.com) is using `Vno Jekyll` as well, you could see how it works in real. There are some other sites using the same theme. You can find them below:

| Site Name    | URL                                                |
| ------------ | ---------------------------------------------------|
| OneV's Den   | [http://onevcat.com](http://onevcat.com)           |
| July Tang    | [http://blog.julytang.xyz](http://onevcat.com)     |
| Harry Lee    | [http://qiuqi.li](http://qiuqi.li)                 |

> If you happen to be using this theme, welcome to [send me a pull request](https://github.com/onevcat/vno-jekyll/pulls) to add your site link here. :)

#### License

Great thanks to [Dale Anthony](https://github.com/daleanthony) and his [Uno](https://github.com/daleanthony/uno). Vno Jekyll is based on Uno, and contains a lot of modification on page layout, animation, font and some more things I can not remember. Vno Jekyll is followed with Uno and be licensed as [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/). See the link for more information.
